// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package flowgraph

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// AccountTransfersAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// Represents an account in the Flow blockchain
type AccountTransfersAccount struct {
	// Query transactions with transfers (both token and NFTs) that is related with this account.
	//
	// This is a special query designed to query all asset transfers of an account.
	TransferTransactions AccountTransfersAccountTransferTransactionsAccountTransferConnection `json:"transferTransactions"`
}

// GetTransferTransactions returns AccountTransfersAccount.TransferTransactions, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccount) GetTransferTransactions() AccountTransfersAccountTransferTransactionsAccountTransferConnection {
	return v.TransferTransactions
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnection includes the requested fields of the GraphQL type AccountTransferConnection.
// The GraphQL type's documentation follows.
//
// Connection of transactions
type AccountTransfersAccountTransferTransactionsAccountTransferConnection struct {
	// The page info
	PageInfo AccountTransfersAccountTransferTransactionsAccountTransferConnectionPageInfo `json:"pageInfo"`
	// The edges of this connection
	Edges []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge `json:"edges"`
}

// GetPageInfo returns AccountTransfersAccountTransferTransactionsAccountTransferConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnection) GetPageInfo() AccountTransfersAccountTransferTransactionsAccountTransferConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns AccountTransfersAccountTransferTransactionsAccountTransferConnection.Edges, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnection) GetEdges() []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge {
	return v.Edges
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge includes the requested fields of the GraphQL type AccountTransferEdge.
// The GraphQL type's documentation follows.
//
// Edges of AccountTransfersConnection
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge struct {
	// The transaction with the transfers
	Transaction AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction `json:"transaction"`
	// NFT transfers inside this transaction
	NftTransfers AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnection `json:"nftTransfers"`
	// Fungible token transfers inside this transaction
	TokenTransfers AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnection `json:"tokenTransfers"`
}

// GetTransaction returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge.Transaction, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge) GetTransaction() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction {
	return v.Transaction
}

// GetNftTransfers returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge.NftTransfers, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge) GetNftTransfers() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnection {
	return v.NftTransfers
}

// GetTokenTransfers returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge.TokenTransfers, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdge) GetTokenTransfers() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnection {
	return v.TokenTransfers
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnection includes the requested fields of the GraphQL type NFTTransferConnection.
// The GraphQL type's documentation follows.
//
// Connection of NFTs
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnection struct {
	// The page info
	PageInfo AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionPageInfo `json:"pageInfo"`
	// The edges of this connection
	Edges []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdge `json:"edges"`
}

// GetPageInfo returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnection) GetPageInfo() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnection.Edges, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnection) GetEdges() []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdge {
	return v.Edges
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdge includes the requested fields of the GraphQL type NFTTransferEdge.
// The GraphQL type's documentation follows.
//
// Edges for NFTTransferConnection
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdge struct {
	// The payload of the edge
	Node AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer `json:"node"`
}

// GetNode returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdge.Node, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdge) GetNode() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer {
	return v.Node
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer includes the requested fields of the GraphQL type NFTTransfer.
// The GraphQL type's documentation follows.
//
// A transfer of NFT event
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer struct {
	// The NFT that is being transferred
	Nft AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT `json:"nft"`
	// The sender, could be null
	From AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount `json:"from"`
	// The destination, could be null
	To AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount `json:"to"`
}

// GetNft returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer.Nft, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer) GetNft() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT {
	return v.Nft
}

// GetFrom returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer.From, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer) GetFrom() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount {
	return v.From
}

// GetTo returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer.To, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer) GetTo() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount {
	return v.To
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// Represents an account in the Flow blockchain
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount struct {
	// The address of the account
	Address string `json:"address"`
}

// GetAddress returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount.Address, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount) GetAddress() string {
	return v.Address
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT includes the requested fields of the GraphQL type NFT.
// The GraphQL type's documentation follows.
//
// NFT definition
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT struct {
	// The NFT ID
	NftId string `json:"nftId"`
	// The contract that defines the NFT
	Contract AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract `json:"contract"`
}

// GetNftId returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT.NftId, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT) GetNftId() string {
	return v.NftId
}

// GetContract returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT.Contract, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT) GetContract() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract {
	return v.Contract
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract includes the requested fields of the GraphQL type Contract.
// The GraphQL type's documentation follows.
//
// Represents a deployed contract on the Flow blockchain
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract struct {
	// Fully-qualified identifier of this contract
	Id string `json:"id"`
}

// GetId returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract.Id, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract) GetId() string {
	return v.Id
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// Represents an account in the Flow blockchain
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount struct {
	// The address of the account
	Address string `json:"address"`
}

// GetAddress returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount.Address, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount) GetAddress() string {
	return v.Address
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Describes the page information inside a data connection, as required by Relay server specification standard
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionPageInfo struct {
	HasNextPage bool   `json:"hasNextPage"`
	EndCursor   string `json:"endCursor"`
}

// GetHasNextPage returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeNftTransfersNFTTransferConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnection includes the requested fields of the GraphQL type TokenTransferConnection.
// The GraphQL type's documentation follows.
//
// Connection of token transfers
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnection struct {
	// The page info
	PageInfo AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionPageInfo `json:"pageInfo"`
	// The edges of this connection
	Edges []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge `json:"edges"`
}

// GetPageInfo returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnection) GetPageInfo() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnection.Edges, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnection) GetEdges() []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge {
	return v.Edges
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge includes the requested fields of the GraphQL type TokenTransferEdge.
// The GraphQL type's documentation follows.
//
// Edges inside TokenTransferConnection
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge struct {
	// The payload of the edge
	Node AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer `json:"node"`
}

// GetNode returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge.Node, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge) GetNode() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer {
	return v.Node
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer includes the requested fields of the GraphQL type TokenTransfer.
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer struct {
	// The transfer type
	Type TransferType `json:"type"`
	// The amount of tokens transferred
	Amount AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount `json:"amount"`
	// A counterparty is the opposite side of a token transfer.
	//
	// For example if this `Transfer` record shows a 100 FLOW token balance withdrawal from the account A, this field will return the
	// receiver of that 100 FLOW token.
	//
	// There could be multiple counterparties in a transaction, e.g. if A distributes 10 FLOW to account B and 5 FLOW to account C in one transaction,
	// where in this case B and C are the counterparties of account A.
	//
	// In the case of multiple counterparties, this field will only return the most significant counterparty by the token amount.
	// To get more details you would need to query the transfers from the transaction itself.
	Counterparty AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount `json:"counterparty"`
}

// GetType returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer.Type, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer) GetType() TransferType {
	return v.Type
}

// GetAmount returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer.Amount, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer) GetAmount() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount {
	return v.Amount
}

// GetCounterparty returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer.Counterparty, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer) GetCounterparty() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount {
	return v.Counterparty
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount includes the requested fields of the GraphQL type TokenAmount.
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount struct {
	// (Query) The definition of the fungible token
	Token AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken `json:"token"`
	// The amount of the transferred tokens as a fixed-point value.
	// JSON does not support fixed point values or big integers, therefore this value is
	// encoded as a string with 8 decimal points.
	//
	// For example, 123456789 represents the value 1.23456789
	Value string `json:"value"`
}

// GetToken returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount.Token, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount) GetToken() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken {
	return v.Token
}

// GetValue returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount.Value, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount) GetValue() string {
	return v.Value
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken includes the requested fields of the GraphQL type Token.
// The GraphQL type's documentation follows.
//
// A fungible token on the Flow blockchain
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken struct {
	// The ID of the token, identical with the contract ID of the token
	Id string `json:"id"`
}

// GetId returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken.Id, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken) GetId() string {
	return v.Id
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// Represents an account in the Flow blockchain
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount struct {
	// The address of the account
	Address string `json:"address"`
}

// GetAddress returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount.Address, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount) GetAddress() string {
	return v.Address
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Describes the page information inside a data connection, as required by Relay server specification standard
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionPageInfo struct {
	HasNextPage bool   `json:"hasNextPage"`
	EndCursor   string `json:"endCursor"`
}

// GetHasNextPage returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTokenTransfersTokenTransferConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction includes the requested fields of the GraphQL type Transaction.
// The GraphQL type's documentation follows.
//
// A sealed transaction in Flow blockchain
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction struct {
	// The hash of the transaction
	Hash string `json:"hash"`
	// The time this transaction happened
	Time time.Time `json:"time"`
	// The transaction code (in Cadence) used in this transaction
	Script string `json:"script"`
	// The arguments used for this transaction
	Arguments interface{} `json:"arguments"`
	// Query the events produced by this transaction
	Events AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnection `json:"events"`
}

// GetHash returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction.Hash, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction) GetHash() string {
	return v.Hash
}

// GetTime returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction.Time, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction) GetTime() time.Time {
	return v.Time
}

// GetScript returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction.Script, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction) GetScript() string {
	return v.Script
}

// GetArguments returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction.Arguments, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction) GetArguments() interface{} {
	return v.Arguments
}

// GetEvents returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction.Events, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransaction) GetEvents() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnection {
	return v.Events
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnection includes the requested fields of the GraphQL type EventConnection.
// The GraphQL type's documentation follows.
//
// Connection of events
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnection struct {
	// The page info
	PageInfo AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionPageInfo `json:"pageInfo"`
	// The edges of this connection
	Edges []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdge `json:"edges"`
}

// GetPageInfo returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnection) GetPageInfo() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnection.Edges, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnection) GetEdges() []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdge {
	return v.Edges
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdge includes the requested fields of the GraphQL type EventEdge.
// The GraphQL type's documentation follows.
//
// Edges inside EvenConnection
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdge struct {
	// The payload of the edge
	Node AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEvent `json:"node"`
}

// GetNode returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdge.Node, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdge) GetNode() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEvent {
	return v.Node
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEvent includes the requested fields of the GraphQL type Event.
// The GraphQL type's documentation follows.
//
// Represents an event on the Flow blockchain
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEvent struct {
	// The field values of this event
	Fields []interface{} `json:"fields"`
	// The type of this event
	Type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventType `json:"type"`
}

// GetFields returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEvent.Fields, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEvent) GetFields() []interface{} {
	return v.Fields
}

// GetType returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEvent.Type, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEvent) GetType() AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventType {
	return v.Type
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventType includes the requested fields of the GraphQL type EventType.
// The GraphQL type's documentation follows.
//
// Represents an event type on the Flow blockchain
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventType struct {
	// Fully-qualified name of the event type that includes the contract address and type
	Id string `json:"id"`
	// Fields of this event type
	Fields []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField `json:"fields"`
}

// GetId returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventType.Id, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventType) GetId() string {
	return v.Id
}

// GetFields returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventType.Fields, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventType) GetFields() []AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField {
	return v.Fields
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField includes the requested fields of the GraphQL type EventTypeField.
// The GraphQL type's documentation follows.
//
// Represents the fields inside an event type
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField struct {
	// The field identifier of this event field
	Identifier string `json:"identifier"`
}

// GetIdentifier returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField.Identifier, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField) GetIdentifier() string {
	return v.Identifier
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Describes the page information inside a data connection, as required by Relay server specification standard
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

// GetHasNextPage returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionEdgesAccountTransferEdgeTransactionEventsEventConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// AccountTransfersAccountTransferTransactionsAccountTransferConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Describes the page information inside a data connection, as required by Relay server specification standard
type AccountTransfersAccountTransferTransactionsAccountTransferConnectionPageInfo struct {
	HasNextPage bool   `json:"hasNextPage"`
	EndCursor   string `json:"endCursor"`
}

// GetHasNextPage returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns AccountTransfersAccountTransferTransactionsAccountTransferConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *AccountTransfersAccountTransferTransactionsAccountTransferConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// AccountTransfersResponse is returned by AccountTransfers on success.
type AccountTransfersResponse struct {
	// Get an account by ID (address)
	Account AccountTransfersAccount `json:"account"`
}

// GetAccount returns AccountTransfersResponse.Account, and is useful for accessing the field via an interface.
func (v *AccountTransfersResponse) GetAccount() AccountTransfersAccount { return v.Account }

// TransactionEventsResponse is returned by TransactionEvents on success.
type TransactionEventsResponse struct {
	// Get a sealed transaction by ID (hash)
	Transaction TransactionEventsTransaction `json:"transaction"`
}

// GetTransaction returns TransactionEventsResponse.Transaction, and is useful for accessing the field via an interface.
func (v *TransactionEventsResponse) GetTransaction() TransactionEventsTransaction {
	return v.Transaction
}

// TransactionEventsTransaction includes the requested fields of the GraphQL type Transaction.
// The GraphQL type's documentation follows.
//
// A sealed transaction in Flow blockchain
type TransactionEventsTransaction struct {
	// Query the events produced by this transaction
	Events TransactionEventsTransactionEventsEventConnection `json:"events"`
}

// GetEvents returns TransactionEventsTransaction.Events, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransaction) GetEvents() TransactionEventsTransactionEventsEventConnection {
	return v.Events
}

// TransactionEventsTransactionEventsEventConnection includes the requested fields of the GraphQL type EventConnection.
// The GraphQL type's documentation follows.
//
// Connection of events
type TransactionEventsTransactionEventsEventConnection struct {
	// The page info
	PageInfo TransactionEventsTransactionEventsEventConnectionPageInfo `json:"pageInfo"`
	// The edges of this connection
	Edges []TransactionEventsTransactionEventsEventConnectionEdgesEventEdge `json:"edges"`
}

// GetPageInfo returns TransactionEventsTransactionEventsEventConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnection) GetPageInfo() TransactionEventsTransactionEventsEventConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns TransactionEventsTransactionEventsEventConnection.Edges, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnection) GetEdges() []TransactionEventsTransactionEventsEventConnectionEdgesEventEdge {
	return v.Edges
}

// TransactionEventsTransactionEventsEventConnectionEdgesEventEdge includes the requested fields of the GraphQL type EventEdge.
// The GraphQL type's documentation follows.
//
// Edges inside EvenConnection
type TransactionEventsTransactionEventsEventConnectionEdgesEventEdge struct {
	// The payload of the edge
	Node TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEvent `json:"node"`
}

// GetNode returns TransactionEventsTransactionEventsEventConnectionEdgesEventEdge.Node, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnectionEdgesEventEdge) GetNode() TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEvent {
	return v.Node
}

// TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEvent includes the requested fields of the GraphQL type Event.
// The GraphQL type's documentation follows.
//
// Represents an event on the Flow blockchain
type TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEvent struct {
	// The field values of this event
	Fields []interface{} `json:"fields"`
	// The type of this event
	Type TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventType `json:"type"`
}

// GetFields returns TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEvent.Fields, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEvent) GetFields() []interface{} {
	return v.Fields
}

// GetType returns TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEvent.Type, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEvent) GetType() TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventType {
	return v.Type
}

// TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventType includes the requested fields of the GraphQL type EventType.
// The GraphQL type's documentation follows.
//
// Represents an event type on the Flow blockchain
type TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventType struct {
	// Fully-qualified name of the event type that includes the contract address and type
	Id string `json:"id"`
	// Fields of this event type
	Fields []TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField `json:"fields"`
}

// GetId returns TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventType.Id, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventType) GetId() string {
	return v.Id
}

// GetFields returns TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventType.Fields, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventType) GetFields() []TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField {
	return v.Fields
}

// TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField includes the requested fields of the GraphQL type EventTypeField.
// The GraphQL type's documentation follows.
//
// Represents the fields inside an event type
type TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField struct {
	// The field identifier of this event field
	Identifier string `json:"identifier"`
}

// GetIdentifier returns TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField.Identifier, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnectionEdgesEventEdgeNodeEventTypeFieldsEventTypeField) GetIdentifier() string {
	return v.Identifier
}

// TransactionEventsTransactionEventsEventConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Describes the page information inside a data connection, as required by Relay server specification standard
type TransactionEventsTransactionEventsEventConnectionPageInfo struct {
	EndCursor   string `json:"endCursor"`
	HasNextPage bool   `json:"hasNextPage"`
}

// GetEndCursor returns TransactionEventsTransactionEventsEventConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns TransactionEventsTransactionEventsEventConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *TransactionEventsTransactionEventsEventConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// TransactionNFTResponse is returned by TransactionNFT on success.
type TransactionNFTResponse struct {
	// Get a sealed transaction by ID (hash)
	Transaction TransactionNFTTransaction `json:"transaction"`
}

// GetTransaction returns TransactionNFTResponse.Transaction, and is useful for accessing the field via an interface.
func (v *TransactionNFTResponse) GetTransaction() TransactionNFTTransaction { return v.Transaction }

// TransactionNFTTransaction includes the requested fields of the GraphQL type Transaction.
// The GraphQL type's documentation follows.
//
// A sealed transaction in Flow blockchain
type TransactionNFTTransaction struct {
	// Query the NFT transfers in this transaction
	NftTransfers TransactionNFTTransactionNftTransfersNFTTransferConnection `json:"nftTransfers"`
}

// GetNftTransfers returns TransactionNFTTransaction.NftTransfers, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransaction) GetNftTransfers() TransactionNFTTransactionNftTransfersNFTTransferConnection {
	return v.NftTransfers
}

// TransactionNFTTransactionNftTransfersNFTTransferConnection includes the requested fields of the GraphQL type NFTTransferConnection.
// The GraphQL type's documentation follows.
//
// Connection of NFTs
type TransactionNFTTransactionNftTransfersNFTTransferConnection struct {
	// The page info
	PageInfo TransactionNFTTransactionNftTransfersNFTTransferConnectionPageInfo `json:"pageInfo"`
	// The edges of this connection
	Edges []TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdge `json:"edges"`
}

// GetPageInfo returns TransactionNFTTransactionNftTransfersNFTTransferConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnection) GetPageInfo() TransactionNFTTransactionNftTransfersNFTTransferConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns TransactionNFTTransactionNftTransfersNFTTransferConnection.Edges, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnection) GetEdges() []TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdge {
	return v.Edges
}

// TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdge includes the requested fields of the GraphQL type NFTTransferEdge.
// The GraphQL type's documentation follows.
//
// Edges for NFTTransferConnection
type TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdge struct {
	// The payload of the edge
	Node TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer `json:"node"`
}

// GetNode returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdge.Node, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdge) GetNode() TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer {
	return v.Node
}

// TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer includes the requested fields of the GraphQL type NFTTransfer.
// The GraphQL type's documentation follows.
//
// A transfer of NFT event
type TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer struct {
	// The NFT that is being transferred
	Nft TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT `json:"nft"`
	// The sender, could be null
	From TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount `json:"from"`
	// The destination, could be null
	To TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount `json:"to"`
}

// GetNft returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer.Nft, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer) GetNft() TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT {
	return v.Nft
}

// GetFrom returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer.From, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer) GetFrom() TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount {
	return v.From
}

// GetTo returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer.To, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransfer) GetTo() TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount {
	return v.To
}

// TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// Represents an account in the Flow blockchain
type TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount struct {
	// The address of the account
	Address string `json:"address"`
}

// GetAddress returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount.Address, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferFromAccount) GetAddress() string {
	return v.Address
}

// TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT includes the requested fields of the GraphQL type NFT.
// The GraphQL type's documentation follows.
//
// NFT definition
type TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT struct {
	// The NFT ID
	NftId string `json:"nftId"`
	// The contract that defines the NFT
	Contract TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract `json:"contract"`
}

// GetNftId returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT.NftId, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT) GetNftId() string {
	return v.NftId
}

// GetContract returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT.Contract, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFT) GetContract() TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract {
	return v.Contract
}

// TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract includes the requested fields of the GraphQL type Contract.
// The GraphQL type's documentation follows.
//
// Represents a deployed contract on the Flow blockchain
type TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract struct {
	// Fully-qualified identifier of this contract
	Id string `json:"id"`
}

// GetId returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract.Id, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferNftNFTContract) GetId() string {
	return v.Id
}

// TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// Represents an account in the Flow blockchain
type TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount struct {
	// The address of the account
	Address string `json:"address"`
}

// GetAddress returns TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount.Address, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionEdgesNFTTransferEdgeNodeNFTTransferToAccount) GetAddress() string {
	return v.Address
}

// TransactionNFTTransactionNftTransfersNFTTransferConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Describes the page information inside a data connection, as required by Relay server specification standard
type TransactionNFTTransactionNftTransfersNFTTransferConnectionPageInfo struct {
	HasNextPage bool   `json:"hasNextPage"`
	EndCursor   string `json:"endCursor"`
}

// GetHasNextPage returns TransactionNFTTransactionNftTransfersNFTTransferConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns TransactionNFTTransactionNftTransfersNFTTransferConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *TransactionNFTTransactionNftTransfersNFTTransferConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// TransactionTokensResponse is returned by TransactionTokens on success.
type TransactionTokensResponse struct {
	// Get a sealed transaction by ID (hash)
	Transaction TransactionTokensTransaction `json:"transaction"`
}

// GetTransaction returns TransactionTokensResponse.Transaction, and is useful for accessing the field via an interface.
func (v *TransactionTokensResponse) GetTransaction() TransactionTokensTransaction {
	return v.Transaction
}

// TransactionTokensTransaction includes the requested fields of the GraphQL type Transaction.
// The GraphQL type's documentation follows.
//
// A sealed transaction in Flow blockchain
type TransactionTokensTransaction struct {
	// Query the token transfers in this transaction
	TokenTransfers TransactionTokensTransactionTokenTransfersTokenTransferConnection `json:"tokenTransfers"`
}

// GetTokenTransfers returns TransactionTokensTransaction.TokenTransfers, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransaction) GetTokenTransfers() TransactionTokensTransactionTokenTransfersTokenTransferConnection {
	return v.TokenTransfers
}

// TransactionTokensTransactionTokenTransfersTokenTransferConnection includes the requested fields of the GraphQL type TokenTransferConnection.
// The GraphQL type's documentation follows.
//
// Connection of token transfers
type TransactionTokensTransactionTokenTransfersTokenTransferConnection struct {
	// The page info
	PageInfo TransactionTokensTransactionTokenTransfersTokenTransferConnectionPageInfo `json:"pageInfo"`
	// The edges of this connection
	Edges []TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge `json:"edges"`
}

// GetPageInfo returns TransactionTokensTransactionTokenTransfersTokenTransferConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnection) GetPageInfo() TransactionTokensTransactionTokenTransfersTokenTransferConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns TransactionTokensTransactionTokenTransfersTokenTransferConnection.Edges, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnection) GetEdges() []TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge {
	return v.Edges
}

// TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge includes the requested fields of the GraphQL type TokenTransferEdge.
// The GraphQL type's documentation follows.
//
// Edges inside TokenTransferConnection
type TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge struct {
	// The payload of the edge
	Node TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer `json:"node"`
}

// GetNode returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge.Node, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdge) GetNode() TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer {
	return v.Node
}

// TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer includes the requested fields of the GraphQL type TokenTransfer.
type TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer struct {
	// The transfer type
	Type TransferType `json:"type"`
	// The amount of tokens transferred
	Amount TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount `json:"amount"`
	// A counterparty is the opposite side of a token transfer.
	//
	// For example if this `Transfer` record shows a 100 FLOW token balance withdrawal from the account A, this field will return the
	// receiver of that 100 FLOW token.
	//
	// There could be multiple counterparties in a transaction, e.g. if A distributes 10 FLOW to account B and 5 FLOW to account C in one transaction,
	// where in this case B and C are the counterparties of account A.
	//
	// In the case of multiple counterparties, this field will only return the most significant counterparty by the token amount.
	// To get more details you would need to query the transfers from the transaction itself.
	Counterparty TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount `json:"counterparty"`
}

// GetType returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer.Type, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer) GetType() TransferType {
	return v.Type
}

// GetAmount returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer.Amount, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer) GetAmount() TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount {
	return v.Amount
}

// GetCounterparty returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer.Counterparty, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransfer) GetCounterparty() TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount {
	return v.Counterparty
}

// TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount includes the requested fields of the GraphQL type TokenAmount.
type TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount struct {
	// (Query) The definition of the fungible token
	Token TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken `json:"token"`
	// The amount of the transferred tokens as a fixed-point value.
	// JSON does not support fixed point values or big integers, therefore this value is
	// encoded as a string with 8 decimal points.
	//
	// For example, 123456789 represents the value 1.23456789
	Value string `json:"value"`
}

// GetToken returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount.Token, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount) GetToken() TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken {
	return v.Token
}

// GetValue returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount.Value, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmount) GetValue() string {
	return v.Value
}

// TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken includes the requested fields of the GraphQL type Token.
// The GraphQL type's documentation follows.
//
// A fungible token on the Flow blockchain
type TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken struct {
	// The ID of the token, identical with the contract ID of the token
	Id string `json:"id"`
}

// GetId returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken.Id, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferAmountTokenAmountToken) GetId() string {
	return v.Id
}

// TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// Represents an account in the Flow blockchain
type TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount struct {
	// The address of the account
	Address string `json:"address"`
}

// GetAddress returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount.Address, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionEdgesTokenTransferEdgeNodeTokenTransferCounterpartyAccount) GetAddress() string {
	return v.Address
}

// TransactionTokensTransactionTokenTransfersTokenTransferConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Describes the page information inside a data connection, as required by Relay server specification standard
type TransactionTokensTransactionTokenTransfersTokenTransferConnectionPageInfo struct {
	HasNextPage bool   `json:"hasNextPage"`
	EndCursor   string `json:"endCursor"`
}

// GetHasNextPage returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns TransactionTokensTransactionTokenTransfersTokenTransferConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *TransactionTokensTransactionTokenTransfersTokenTransferConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// Represents transfer a type
type TransferType string

const (
	TransferTypeDeposit  TransferType = "Deposit"
	TransferTypeWithdraw TransferType = "Withdraw"
)

// __AccountTransfersInput is used internally by genqlient
type __AccountTransfersInput struct {
	AccountId string `json:"accountId"`
	After     string `json:"after"`
}

// GetAccountId returns __AccountTransfersInput.AccountId, and is useful for accessing the field via an interface.
func (v *__AccountTransfersInput) GetAccountId() string { return v.AccountId }

// GetAfter returns __AccountTransfersInput.After, and is useful for accessing the field via an interface.
func (v *__AccountTransfersInput) GetAfter() string { return v.After }

// __TransactionEventsInput is used internally by genqlient
type __TransactionEventsInput struct {
	TxID  string `json:"txID"`
	After string `json:"after"`
}

// GetTxID returns __TransactionEventsInput.TxID, and is useful for accessing the field via an interface.
func (v *__TransactionEventsInput) GetTxID() string { return v.TxID }

// GetAfter returns __TransactionEventsInput.After, and is useful for accessing the field via an interface.
func (v *__TransactionEventsInput) GetAfter() string { return v.After }

// __TransactionNFTInput is used internally by genqlient
type __TransactionNFTInput struct {
	TxId  string `json:"txId"`
	After string `json:"after"`
}

// GetTxId returns __TransactionNFTInput.TxId, and is useful for accessing the field via an interface.
func (v *__TransactionNFTInput) GetTxId() string { return v.TxId }

// GetAfter returns __TransactionNFTInput.After, and is useful for accessing the field via an interface.
func (v *__TransactionNFTInput) GetAfter() string { return v.After }

// __TransactionTokensInput is used internally by genqlient
type __TransactionTokensInput struct {
	TxId  string `json:"txId"`
	After string `json:"after"`
}

// GetTxId returns __TransactionTokensInput.TxId, and is useful for accessing the field via an interface.
func (v *__TransactionTokensInput) GetTxId() string { return v.TxId }

// GetAfter returns __TransactionTokensInput.After, and is useful for accessing the field via an interface.
func (v *__TransactionTokensInput) GetAfter() string { return v.After }

func AccountTransfers(
	ctx context.Context,
	client graphql.Client,
	accountId string,
	after string,
) (*AccountTransfersResponse, error) {
	req := &graphql.Request{
		OpName: "AccountTransfers",
		Query: `
query AccountTransfers ($accountId: ID!, $after: ID) {
	account(id: $accountId) {
		transferTransactions(first: 50, ordering: Ascending, after: $after) {
			pageInfo {
				hasNextPage
				endCursor
			}
			edges {
				transaction {
					hash
					time
					script
					arguments
					events(first: 50) {
						pageInfo {
							hasNextPage
						}
						edges {
							node {
								fields
								type {
									id
									fields {
										identifier
									}
								}
							}
						}
					}
				}
				nftTransfers {
					pageInfo {
						hasNextPage
						endCursor
					}
					edges {
						node {
							nft {
								nftId
								contract {
									id
								}
							}
							from {
								address
							}
							to {
								address
							}
						}
					}
				}
				tokenTransfers {
					pageInfo {
						hasNextPage
						endCursor
					}
					edges {
						node {
							type
							amount {
								token {
									id
								}
								value
							}
							counterparty {
								address
							}
						}
					}
				}
			}
		}
	}
}
`,
		Variables: &__AccountTransfersInput{
			AccountId: accountId,
			After:     after,
		},
	}
	var err error

	var data AccountTransfersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func TransactionEvents(
	ctx context.Context,
	client graphql.Client,
	txID string,
	after string,
) (*TransactionEventsResponse, error) {
	req := &graphql.Request{
		OpName: "TransactionEvents",
		Query: `
query TransactionEvents ($txID: ID!, $after: ID) {
	transaction(id: $txID) {
		events(first: 50, after: $after) {
			pageInfo {
				endCursor
				hasNextPage
			}
			edges {
				node {
					fields
					type {
						id
						fields {
							identifier
						}
					}
				}
			}
		}
	}
}
`,
		Variables: &__TransactionEventsInput{
			TxID:  txID,
			After: after,
		},
	}
	var err error

	var data TransactionEventsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func TransactionNFT(
	ctx context.Context,
	client graphql.Client,
	txId string,
	after string,
) (*TransactionNFTResponse, error) {
	req := &graphql.Request{
		OpName: "TransactionNFT",
		Query: `
query TransactionNFT ($txId: ID!, $after: ID) {
	transaction(id: $txId) {
		nftTransfers(first: 50, after: $after) {
			pageInfo {
				hasNextPage
				endCursor
			}
			edges {
				node {
					nft {
						nftId
						contract {
							id
						}
					}
					from {
						address
					}
					to {
						address
					}
				}
			}
		}
	}
}
`,
		Variables: &__TransactionNFTInput{
			TxId:  txId,
			After: after,
		},
	}
	var err error

	var data TransactionNFTResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func TransactionTokens(
	ctx context.Context,
	client graphql.Client,
	txId string,
	after string,
) (*TransactionTokensResponse, error) {
	req := &graphql.Request{
		OpName: "TransactionTokens",
		Query: `
query TransactionTokens ($txId: ID!, $after: ID) {
	transaction(id: $txId) {
		tokenTransfers(first: 50, after: $after) {
			pageInfo {
				hasNextPage
				endCursor
			}
			edges {
				node {
					type
					amount {
						token {
							id
						}
						value
					}
					counterparty {
						address
					}
				}
			}
		}
	}
}
`,
		Variables: &__TransactionTokensInput{
			TxId:  txId,
			After: after,
		},
	}
	var err error

	var data TransactionTokensResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
